__d(function(g,r,i,a,m,e,d){'use strict';var t=['auto','yes','no','no-hide-descendants'],l=(function(l){function n(){var t,l;r(d[1])(this,n);for(var c=arguments.length,s=new Array(c),o=0;o<c;o++)s[o]=arguments[o];return(l=r(d[2])(this,(t=r(d[3])(n)).call.apply(t,[this].concat(s)))).state={count:0,backgroundImportantForAcc:0,forgroundImportantForAcc:0,screenReaderEnabled:!1},l._handleScreenReaderToggled=function(t){l.setState({screenReaderEnabled:t})},l._addOne=function(){l.setState({count:++l.state.count})},l._changeBackgroundImportantForAcc=function(){l.setState({backgroundImportantForAcc:(l.state.backgroundImportantForAcc+1)%4})},l._changeForgroundImportantForAcc=function(){l.setState({forgroundImportantForAcc:(l.state.forgroundImportantForAcc+1)%4})},l}return r(d[0])(n,l),r(d[4])(n,[{key:"componentDidMount",value:function(){var t=this;r(d[5]).AccessibilityInfo.addEventListener('change',this._handleScreenReaderToggled),r(d[5]).AccessibilityInfo.fetch().done(function(l){t.setState({screenReaderEnabled:l})})}},{key:"componentWillUnmount",value:function(){r(d[5]).AccessibilityInfo.removeEventListener('change',this._handleScreenReaderToggled)}},{key:"render",value:function(){return r(d[6]).createElement(r(d[7]),{title:'Accessibility'},r(d[6]).createElement(r(d[8]),{title:"Nonaccessible view with TextViews"},r(d[6]).createElement(r(d[5]).View,null,r(d[6]).createElement(r(d[5]).Text,{style:{color:'green'}},"This is"),r(d[6]).createElement(r(d[5]).Text,{style:{color:'blue'}},"nontouchable normal view."))),r(d[6]).createElement(r(d[8]),{title:"Accessible view with TextViews wihout label"},r(d[6]).createElement(r(d[5]).View,{accessible:!0},r(d[6]).createElement(r(d[5]).Text,{style:{color:'green'}},"This is"),r(d[6]).createElement(r(d[5]).Text,{style:{color:'blue'}},"nontouchable accessible view without label."))),r(d[6]).createElement(r(d[8]),{title:"Accessible view with TextViews with label"},r(d[6]).createElement(r(d[5]).View,{accessible:!0,accessibilityLabel:"I have label, so I read it instead of embedded text."},r(d[6]).createElement(r(d[5]).Text,{style:{color:'green'}},"This is"),r(d[6]).createElement(r(d[5]).Text,{style:{color:'blue'}},"nontouchable accessible view with label."))),r(d[6]).createElement(r(d[8]),{title:"Touchable with accessibilityRole = button"},r(d[6]).createElement(r(d[5]).TouchableWithoutFeedback,{onPress:function(){return r(d[5]).ToastAndroid.show('Toasts work by default',r(d[5]).ToastAndroid.SHORT)},accessibilityRole:"button"},r(d[6]).createElement(r(d[5]).View,{style:c.embedded},r(d[6]).createElement(r(d[5]).Text,null,"Click me"),r(d[6]).createElement(r(d[5]).Text,null,"Or not")))),r(d[6]).createElement(r(d[8]),{title:"Disabled Touchable with accessibilityRole = button"},r(d[6]).createElement(r(d[5]).TouchableWithoutFeedback,{onPress:function(){return r(d[5]).ToastAndroid.show('Toasts work by default',r(d[5]).ToastAndroid.SHORT)},accessibilityRole:"button",accessibilityStates:['disabled'],disabled:!0},r(d[6]).createElement(r(d[5]).View,null,r(d[6]).createElement(r(d[5]).Text,null,"I am disabled"),r(d[6]).createElement(r(d[5]).Text,null,"Clicking me will not trigger any action.")))),r(d[6]).createElement(r(d[8]),{title:"Touchable with accessibilityRole = button and accessibilityHint"},r(d[6]).createElement(r(d[5]).TouchableWithoutFeedback,{onPress:function(){return r(d[5]).ToastAndroid.show('Toasts work by default',r(d[5]).ToastAndroid.SHORT)},accessibilityRole:"button",accessibilityHint:"Triggers Toasts"},r(d[6]).createElement(r(d[5]).View,null,r(d[6]).createElement(r(d[5]).Text,null,"Click Me!")))),r(d[6]).createElement(r(d[8]),{title:"Accessible View with hint, role, and state"},r(d[6]).createElement(r(d[5]).View,{accessible:!0,accessibilityRole:"button",accessibilityStates:['selected'],accessibilityHint:"accessibility hint"},r(d[6]).createElement(r(d[5]).Text,null,"Accessible view with hint, role, and state"),r(d[6]).createElement(r(d[5]).Text,{style:{color:'gray'}},"Talkback will say: accessibility hint button, selected",' '))),r(d[6]).createElement(r(d[8]),{title:"Accessible View with label, hint, role, and state"},r(d[6]).createElement(r(d[5]).View,{accessible:!0,accessibilityLabel:"accessibility Label",accessibilityRole:"button",accessibilityStates:['selected'],accessibilityHint:"accessibility Hint"},r(d[6]).createElement(r(d[5]).Text,null,"Accessible view with label, hint, role, and state"),r(d[6]).createElement(r(d[5]).Text,{style:{color:'gray'}},"Talkback will say: accessibility label, hint button, selected",' '))),r(d[6]).createElement(r(d[8]),{title:"Accessible View with no other properties set"},r(d[6]).createElement(r(d[5]).View,{accessible:!0},r(d[6]).createElement(r(d[5]).Text,null,"This accessible view has no label, so the text is read."))),r(d[6]).createElement(r(d[8]),{title:"LiveRegion"},r(d[6]).createElement(r(d[5]).TouchableWithoutFeedback,{onPress:this._addOne},r(d[6]).createElement(r(d[5]).View,{style:c.embedded},r(d[6]).createElement(r(d[5]).Text,null,"Click me"))),r(d[6]).createElement(r(d[5]).Text,{accessibilityLiveRegion:"polite"},"Clicked ",this.state.count," times")),r(d[6]).createElement(r(d[8]),{title:"Check if the screen reader is enabled"},r(d[6]).createElement(r(d[5]).Text,null,"The screen reader is",' ',this.state.screenReaderEnabled?'enabled':'disabled',".")),r(d[6]).createElement(r(d[8]),{title:"Overlapping views and importantForAccessibility property"},r(d[6]).createElement(r(d[5]).View,{style:c.container},r(d[6]).createElement(r(d[5]).View,{style:{position:'absolute',left:10,top:10,right:10,height:100,backgroundColor:'green'},accessible:!0,accessibilityLabel:"First layout",importantForAccessibility:t[this.state.backgroundImportantForAcc]},r(d[6]).createElement(r(d[5]).View,{accessible:!0},r(d[6]).createElement(r(d[5]).Text,{style:{fontSize:25}},"Hello"))),r(d[6]).createElement(r(d[5]).View,{style:{position:'absolute',left:10,top:25,right:10,height:110,backgroundColor:'yellow',opacity:.5},accessible:!0,accessibilityLabel:"Second layout",importantForAccessibility:t[this.state.forgroundImportantForAcc]},r(d[6]).createElement(r(d[5]).View,{accessible:!0},r(d[6]).createElement(r(d[5]).Text,{style:{fontSize:20}},"world")))),r(d[6]).createElement(r(d[5]).TouchableWithoutFeedback,{onPress:this._changeBackgroundImportantForAcc},r(d[6]).createElement(r(d[5]).View,{style:c.embedded},r(d[6]).createElement(r(d[5]).Text,null,"Change importantForAccessibility for background layout."))),r(d[6]).createElement(r(d[5]).View,{accessible:!0},r(d[6]).createElement(r(d[5]).Text,null,"Background layout importantForAccessibility"),r(d[6]).createElement(r(d[5]).Text,null,t[this.state.backgroundImportantForAcc])),r(d[6]).createElement(r(d[5]).TouchableWithoutFeedback,{onPress:this._changeForgroundImportantForAcc},r(d[6]).createElement(r(d[5]).View,{style:c.embedded},r(d[6]).createElement(r(d[5]).Text,null,"Change importantForAccessibility for forground layout."))),r(d[6]).createElement(r(d[5]).View,{accessible:!0},r(d[6]).createElement(r(d[5]).Text,null,"Forground layout importantForAccessibility"),r(d[6]).createElement(r(d[5]).Text,null,t[this.state.forgroundImportantForAcc]))))}}]),n})(r(d[6]).Component),c=r(d[5]).StyleSheet.create({embedded:{backgroundColor:'yellow',padding:10},container:{flex:1,backgroundColor:'white',padding:10,height:150}});e.title='Accessibility',e.description='Examples of using Accessibility API.',e.examples=[{title:'Accessibility elements',render:function(){return r(d[6]).createElement(l,null)}}]},666816,[614,616,617,620,621,516,514,666697,666708]);